{
    "pipes": [
        {
            "name": "FormControlErrorsPipe",
            "id": "pipe-FormControlErrorsPipe-29fbd6a7e130ec9669789903efb17566",
            "file": "src/app/helper/pipes/form-control-errors.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "FormControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormErrorI | null",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "FormControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "pure": false,
            "ngname": "formControlErrors",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { FormErrorI } from 'src/app/interfaces/FormError';\nimport {\n  extractErrorKeys,\n  selectExtractValidationErrorStrategy,\n} from '../functions/extract-form-validator-data/strategies';\n\n@Pipe({\n  name: 'formControlErrors',\n  pure: false,\n})\nexport class FormControlErrorsPipe implements PipeTransform {\n  transform(value: FormControl): FormErrorI | null {\n    if (value !== null && value !== undefined && value.errors) {\n      const errorKeys = extractErrorKeys(value);\n      if (errorKeys[0]) {\n        return selectExtractValidationErrorStrategy(errorKeys[0], value);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n}\n"
        },
        {
            "name": "FormGroupErrorsPipe",
            "id": "pipe-FormGroupErrorsPipe-64a8047c3937473767b078f75bdb0c96",
            "file": "src/app/helper/pipes/form-group-errors.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "FormGroup"
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "pure": false,
            "ngname": "formGroupErrors",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Pipe({\n  name: 'formGroupErrors',\n  pure: false,\n})\nexport class FormGroupErrorsPipe implements PipeTransform {\n  transform(value: FormGroup): unknown {\n    console.log('Form group pipe', value);\n    if (value !== null && value !== undefined && value.errors) {\n      const errorKeys = Object.keys(value.errors);\n      return errorKeys.length > 0 ? ('formErrors.'+errorKeys[0]) : '';\n    } else {\n      return '';\n    }\n  }\n}\n"
        },
        {
            "name": "TimeFormatterPipe",
            "id": "pipe-TimeFormatterPipe-5bb8eb9e192215e49c58bc3c164418cf",
            "file": "src/app/helper/pipes/timeFormatter/time-formater.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "time",
                            "type": "Array<number>"
                        },
                        {
                            "name": "timeToTransform",
                            "type": "Array<number>"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "time",
                            "type": "Array<number>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "timeToTransform",
                            "type": "Array<number>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "pure": false,
            "ngname": "timeFormatter",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'timeFormatter',\n  pure: false,\n})\nexport class TimeFormatterPipe implements PipeTransform {\n  transform(time: Array<number>, timeToTransform: Array<number>): string {\n    const hours = timeToTransform[0].toString().padStart(2, '0');\n    const minutes = timeToTransform[1].toString().padStart(2, '0');\n    const seconds = timeToTransform[2].toString().padStart(2, '0');\n    return `${hours}:${minutes}:${seconds}`;\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "AuthError",
            "id": "interface-AuthError-c17ee93e1f7ceae3955db70bd9065b62",
            "file": "src/app/interfaces/AuthError.ts",
            "type": "interface",
            "sourceCode": "export interface AuthError {\n  code: string;\n  message: string;\n}\n",
            "properties": [
                {
                    "name": "code",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "message",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "BasicInputFieldI",
            "id": "interface-BasicInputFieldI-c2684fa314be0bc518b903aed560bdd0",
            "file": "src/app/interfaces/inputs/BasicInputFieldI.ts",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\n\nexport interface BasicInputFieldI {\n  name: string;\n  id: string;\n  autocomplete: string;\n  formControl: FormControl;\n  class: string;\n  placeholder: string;\n  type: string;\n}\n",
            "properties": [
                {
                    "name": "autocomplete",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "class",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "formControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "FormErrorI",
            "id": "interface-FormErrorI-c0d6074327c143cf2fc2d88590520f7c",
            "file": "src/app/interfaces/FormError.ts",
            "type": "interface",
            "sourceCode": "export interface FormErrorI {\n  errorCode: string | null;\n  value: string | null;\n}\n",
            "properties": [
                {
                    "name": "errorCode",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthenticationService",
            "id": "injectable-AuthenticationService-beb7526b366bc62793dd56ee61921f42",
            "file": "src/app/services/authentication/authentication.service.ts",
            "properties": [
                {
                    "name": "firebaseAuth",
                    "type": "AngularFireAuth",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "userCredentials",
                    "defaultValue": "null",
                    "type": "firebase.auth.UserCredential | null",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "credentialsLogin",
                    "args": [
                        {
                            "name": "username",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<firebase.auth.UserCredential>",
                    "typeParameters": [],
                    "line": 19,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAuthenticationStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<firebase.User>",
                    "typeParameters": [],
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "googleLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<firebase.auth.UserCredential>",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<firebase.User>",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isGuest",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        114,
                        120
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport firebase from 'firebase/app';\nimport { Observable } from 'rxjs/internal/Observable';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthenticationService {\n  public userCredentials: firebase.auth.UserCredential | null = null;\n  constructor(public firebaseAuth: AngularFireAuth) {}\n  public async googleLogin(): Promise<firebase.auth.UserCredential> {\n    await firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL);\n    return this.firebaseAuth.signInWithPopup(\n        new firebase.auth.GoogleAuthProvider(),\n    );\n  }\n\n  public async credentialsLogin(\n      username: string,\n      password: string,\n  ): Promise<firebase.auth.UserCredential> {\n    await firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL);\n    return this.firebaseAuth.signInWithEmailAndPassword(username, password);\n  }\n\n  public getAuthenticationStatus():Observable<firebase.User> {\n    return this.firebaseAuth.authState;\n  }\n\n  public isAuthenticated(): Observable<firebase.User> {\n    return this.firebaseAuth.authState;\n  }\n\n  public async isGuest(): Promise<boolean> {\n    return new Promise((resolve)=>{\n      this.firebaseAuth.authState.toPromise().then((user:firebase.User)=>{\n        if (user || user !== null || user !== undefined) {\n          resolve(false);\n        } else {\n          resolve(true);\n        }\n      });\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "firebaseAuth",
                        "type": "AngularFireAuth"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "firebaseAuth",
                        "type": "AngularFireAuth",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LanguageService",
            "id": "injectable-LanguageService-ec02bd9e3b0bba42e5f15e980174d114",
            "file": "src/app/services/language/language.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "changeLanguage",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "currentLanguage",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "initializeLanguageApp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CookieService } from 'ngx-cookie-service';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LanguageService {\n  constructor(\n    private cookieService: CookieService,\n    private translate: TranslateService,\n  ) {}\n\n  initializeLanguageApp(): void {\n    if (\n      this.currentLanguage() !== null &&\n      this.currentLanguage() !== undefined &&\n      this.currentLanguage() !== ''\n    ) {\n      this.translate.setDefaultLang(this.currentLanguage());\n    } else {\n      let userLang = navigator.language.split('-')[0];\n      if (userLang === null || userLang === undefined) {\n        userLang = 'en';\n      } else {\n        // if user browser language is not supported\n        if (!environment.languages.includes(userLang)) {\n          userLang = 'en';\n        }\n      }\n      this.cookieService.set('lang', userLang);\n      this.translate.setDefaultLang(userLang);\n    }\n  }\n\n  changeLanguage(lang: string): void {\n    this.cookieService.set('lang', lang);\n    this.cookieService.set('lang', lang);\n    this.translate.setDefaultLang(lang);\n    this.translate.resetLang(lang);\n  }\n\n  currentLanguage(): string {\n    return this.cookieService.get('lang');\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cookieService",
                        "type": "CookieService"
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-ee2067dfb1c303f41003aea7d82d51e0",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ValidatePassword",
            "id": "class-ValidatePassword-216fadc4145154e47ebac3e0af0d389b",
            "file": "src/app/helper/validations/password-match.ts",
            "type": "class",
            "sourceCode": "import { AbstractControl, ValidationErrors } from '@angular/forms';\n\nexport class ValidatePassword {\n  static validate(control: AbstractControl): ValidationErrors | null {\n    if (control) {\n      const password = control.get('password')?.value;\n      const confirmPassword = control.get('confirmPassword')?.value;\n      if (password !== confirmPassword) {\n        const error = { notMatch: true };\n        return error;\n      }\n    }\n    return null;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-89ed496de3f45da911078f06e9275b9c",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'pomodoro-front'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { AuthenticationService } from './services/authentication/authentication.service';\nimport { LanguageService } from './services/language/language.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  title = 'pomodoro-front';\n  constructor(private language: LanguageService, private authenticationService: AuthenticationService) {\n    this.language.initializeLanguageApp();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "language",
                        "type": "LanguageService"
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "language",
                        "type": "LanguageService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<router-outlet></router-outlet>"
        },
        {
            "name": "AuthenticationHomeComponent",
            "id": "component-AuthenticationHomeComponent-696d00ea3e688286ff937697ed0791d8",
            "file": "src/app/authentication/component/authentication-home/authentication-home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-authentication-home",
            "styleUrls": [
                "./authentication-home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./authentication-home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-authentication-home',\n  templateUrl: './authentication-home.component.html',\n  styleUrls: ['./authentication-home.component.scss'],\n})\nexport class AuthenticationHomeComponent implements OnInit {\n  constructor() { }\n\n  ngOnInit(): void {\n    console.log('Authentication home -- init life state');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./authentication-home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-authentication-login class=\"login-container\"></app-authentication-login>\n"
        },
        {
            "name": "AuthenticationLoginComponent",
            "id": "component-AuthenticationLoginComponent-a5cbd91a98ae195c940e5613428c5dbc",
            "file": "src/app/authentication/component/authentication-login/authentication-login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-authentication-login",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./authentication-login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "firebaseAuth",
                    "type": "AngularFireAuth",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "formWithErrors",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "inputFields",
                    "defaultValue": "{ username: null, password: null }",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "credentialsLogin",
                    "args": [
                        {
                            "name": "username",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "githubLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "googleLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "gotoSignUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97
                },
                {
                    "name": "setInputFieldsProps",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "validateCredentials",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport firebase from 'firebase/app';\nimport { BasicInputFieldI } from 'src/app/interfaces/inputs/BasicInputFieldI';\nimport { AuthenticationService } from 'src/app/services/authentication/authentication.service';\n@Component({\n  selector: 'app-authentication-login',\n  templateUrl: './authentication-login.component.html',\n})\nexport class AuthenticationLoginComponent implements OnInit {\n  public authForm: FormGroup;\n  public formWithErrors = false;\n  public inputFields: {\n    username: BasicInputFieldI;\n    password: BasicInputFieldI;\n  } = { username: null, password: null };\n  constructor(\n    public firebaseAuth: AngularFireAuth,\n    private router: Router,\n    private authenticationService: AuthenticationService,\n  ) {\n    this.authForm = new FormGroup({\n      email: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required]),\n    });\n    this.setInputFieldsProps();\n  }\n\n  private setInputFieldsProps(): void {\n    this.inputFields.username = {\n      autocomplete: 'on',\n      class: 'input',\n      formControl: this.authForm.get('email') as FormControl,\n      id: 'email',\n      name: 'email',\n      placeholder: 'authenticationFields.email.placeholder',\n      type: 'text',\n    };\n\n    this.inputFields.password = {\n      autocomplete: 'on',\n      class: 'input',\n      formControl: this.authForm.get('password') as FormControl,\n      id: 'password',\n      name: 'password',\n      placeholder: 'authenticationFields.password.placeholder',\n      type: 'password',\n    };\n  }\n\n  public googleLogin(): void {\n    this.authenticationService\n        .googleLogin()\n        .then((data: firebase.auth.UserCredential) => {\n          console.log('Authentication -- google login', data);\n          this.router.navigateByUrl('/board');\n        })\n        .catch((error: any) => {\n          console.error('Authentication -- google authentication', error);\n        });\n  }\n\n  public credentialsLogin(username: string, password: string): void {\n    this.authenticationService\n        .credentialsLogin(username, password)\n        .then((data: firebase.auth.UserCredential) => {\n          console.log('Authentication -- credentials login', data);\n          this.router.navigateByUrl('/board');\n        })\n        .catch((error: any) => {\n          console.error('Authentication -- credentials authentication', error);\n        });\n  }\n\n  public githubLogin(): void {\n    this.firebaseAuth.signInWithRedirect(\n        new firebase.auth.GithubAuthProvider(),\n    );\n  }\n\n  public validateCredentials(): void {\n    if (this.authForm.valid === true) {\n      const credentials: { username: string; password: string } =\n        this.authForm.getRawValue();\n      this.credentialsLogin(credentials.username, credentials.password);\n    } else {\n      this.formWithErrors = true;\n    }\n  }\n\n  public gotoSignUp(): void {\n    this.router.navigateByUrl('/signUp');\n  }\n\n  ngOnInit(): void {\n    console.log('Authentication login -- init life state');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "firebaseAuth",
                        "type": "AngularFireAuth"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "firebaseAuth",
                        "type": "AngularFireAuth",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"login-container\">\n    <div class=\"login-card\">\n        <div class=\"title\">\n            <p>{{'login.title'|translate}}</p>\n        </div>\n        <div>\n            <app-select-lang></app-select-lang>\n        </div>\n        <form [formGroup]=\"authForm\">\n            <app-basic-input-field [containerClass]=\"'form-group'\" [formGroup]=\"authForm\" [inputProperties]=\"inputFields.username\"></app-basic-input-field>\n            <app-basic-input-field [containerClass]=\"'form-group'\" [formGroup]=\"authForm\" [inputProperties]=\"inputFields.password\"></app-basic-input-field>\n        </form>\n        <div class=\"row-container\">\n            <button class=\"button-row\" (click)=\"validateCredentials()\">Login</button>\n            <button class=\"button-row\" (click)=\"gotoSignUp()\">{{'login.signUpBtn'|translate}}</button>\n        </div>\n        <div class=\"button-large\">\n            <button class=\"button\" (click)=\"googleLogin()\">{{'login.googleBtn'|translate}}</button>\n        </div>\n        <div class=\"button-large\">\n            <button class=\"button\" (click)=\"githubLogin()\">{{'login.githubBtn'|translate}}</button>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "AuthenticationSignupComponent",
            "id": "component-AuthenticationSignupComponent-3d8d98fb0c65a98c7a9ea895ca9527e0",
            "file": "src/app/authentication/component/authentication-signup/authentication-signup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-authentication-signup",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./authentication-signup.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "firebaseAuth",
                    "type": "AngularFireAuth",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "formWithErrors",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "inputFields",
                    "defaultValue": "{ username: null, password: null, confirmPassword: null }",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "signUpError",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54
                },
                {
                    "name": "returnToLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "setInputFieldsProps",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "signUpWithCredentials",
                    "args": [
                        {
                            "name": "username",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateCredentials",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport firebase from 'firebase/app';\nimport { ValidatePassword } from 'src/app/helper/validations/password-match';\nimport { AuthError } from 'src/app/interfaces/AuthError';\nimport { BasicInputFieldI } from 'src/app/interfaces/inputs/BasicInputFieldI';\nimport { LanguageService } from 'src/app/services/language/language.service';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-authentication-signup',\n  templateUrl: './authentication-signup.component.html',\n})\nexport class AuthenticationSignupComponent implements OnInit {\n  public authForm: FormGroup;\n  public signUpError: string | null;\n  public formWithErrors = false;\n  public inputFields: {\n    username: BasicInputFieldI;\n    password: BasicInputFieldI;\n    confirmPassword: BasicInputFieldI;\n  } = { username: null, password: null, confirmPassword: null };\n  constructor(\n    public firebaseAuth: AngularFireAuth,\n    private router: Router,\n    private formBuilder: FormBuilder,\n    private language: LanguageService,\n  ) {\n    this.authForm = formBuilder.group(\n        {\n          email: new FormControl('', [Validators.required, Validators.email]),\n          password: new FormControl('', [\n            Validators.required,\n            Validators.minLength(8),\n          ]),\n          confirmPassword: new FormControl('', [\n            Validators.required,\n            Validators.minLength(8),\n          ]),\n        },\n        { validators: [ValidatePassword.validate] },\n    );\n    // this.authForm.setValidators(passwordMatch);\n    this.setInputFieldsProps();\n  }\n\n  ngOnInit(): void {\n    console.log('Authentication signUp -- init life state');\n  }\n\n  private setInputFieldsProps(): void {\n    this.inputFields.username = {\n      autocomplete: 'on',\n      class: 'input',\n      formControl: this.authForm.get('email') as FormControl,\n      id: 'email',\n      name: 'email',\n      placeholder: 'authenticationFields.email.placeholder',\n      type: 'text',\n    };\n\n    this.inputFields.password = {\n      autocomplete: 'on',\n      class: 'input',\n      formControl: this.authForm.get('password') as FormControl,\n      id: 'password',\n      name: 'password',\n      placeholder: 'authenticationFields.password.placeholder',\n      type: 'password',\n    };\n\n    this.inputFields.confirmPassword = {\n      autocomplete: 'on',\n      class: 'input',\n      formControl: this.authForm.get('confirmPassword') as FormControl,\n      id: 'confirmPassword',\n      name: 'confirmPassword',\n      placeholder: 'authenticationFields.confirmPassword.placeholder',\n      type: 'password',\n    };\n  }\n\n  private signUpWithCredentials(username: string, password: string): void {\n    this.firebaseAuth\n        .createUserWithEmailAndPassword(username, password)\n        .then((data: firebase.auth.UserCredential) => {\n          console.log('Authentication -- sign up with credentials', data);\n        })\n        .catch((error: AuthError) => {\n          this.signUpError = 'authenticationErrors.' + error.code;\n          console.error('Authentication -- sign up with credentials', error.code);\n        });\n  }\n\n  public validateCredentials(): void {\n    if (this.authForm.valid === true) {\n      const credentials: { email: string; password: string } =\n        this.authForm.getRawValue();\n      this.signUpWithCredentials(credentials.email, credentials.password);\n      this.formWithErrors = false;\n    } else {\n      console.log('Authentication -- form error groups', this.authForm);\n      this.formWithErrors = true;\n    }\n  }\n\n  public returnToLogin(): void {\n    this.router.navigateByUrl('/');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "firebaseAuth",
                        "type": "AngularFireAuth"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "language",
                        "type": "LanguageService"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "firebaseAuth",
                        "type": "AngularFireAuth",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "language",
                        "type": "LanguageService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"login-container\">\n    <div class=\"login-card\">\n        <div class=\"title\">\n            <p>{{'signUp.title'|translate}}</p>\n        </div>\n        <div>\n            <app-select-lang></app-select-lang>\n        </div>\n        <form [formGroup]=\"authForm\" (keyup.enter)=\"validateCredentials()\">\n            <app-basic-input-field [containerClass]=\"'form-group'\" [formGroup]=\"authForm\" [inputProperties]=\"inputFields.username\"></app-basic-input-field>\n            <app-basic-input-field [containerClass]=\"'form-group'\" [formGroup]=\"authForm\" [inputProperties]=\"inputFields.password\"></app-basic-input-field>\n            <app-basic-input-field [containerClass]=\"'form-group'\" [formGroup]=\"authForm\" [inputProperties]=\"inputFields.confirmPassword\"></app-basic-input-field>\n            <app-label-message *ngIf=\"signUpError\" class=\"message-error\" [message]=\"(signUpError)\"></app-label-message>\n            <app-label-message *ngIf=\"formWithErrors\" class=\"message-error\" [message]=\"((authForm|formGroupErrors))\"></app-label-message>\n        </form>\n        <div class=\"row-container\">\n            <button class=\"button-row\" (click)=\"returnToLogin()\">{{'signUp.loginBtn'|translate}}</button>\n            <button class=\"button-row\" (click)=\"validateCredentials()\">{{'signUp.sendBtn'|translate}}</button>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "BasicInputFieldComponent",
            "id": "component-BasicInputFieldComponent-9ff09b37178ffff6175fc07ae8916271",
            "file": "src/app/component/atoms/inputs/basic-input-field/basic-input-field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-basic-input-field",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./basic-input-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "containerClass",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "formGroup",
                    "line": 12,
                    "type": "FormGroup"
                },
                {
                    "name": "inputProperties",
                    "line": 10,
                    "type": "BasicInputFieldI"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayMessage",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { BasicInputFieldI } from 'src/app/interfaces/inputs/BasicInputFieldI';\n\n@Component({\n  selector: 'app-basic-input-field',\n  templateUrl: './basic-input-field.component.html',\n})\nexport class BasicInputFieldComponent implements OnInit {\n  @Input() inputProperties: BasicInputFieldI;\n  public displayMessage: boolean = false;\n  @Input() formGroup: FormGroup;\n  @Input() containerClass: string;\n  constructor() {}\n  ngOnInit(): void {\n    this.formGroup.get(this.inputProperties.name).valueChanges.subscribe({\n      next: (_) => {\n        this.displayMessage = this.formGroup.get(\n            this.inputProperties.name,\n        ).dirty;\n      },\n      error: (error) => {\n        console.error('Basic input filed, status subscription', error);\n      },\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [class]=\"containerClass\" [formGroup]=\"formGroup\">\n    <input [class]=\"inputProperties.class\" [formControlName]=\"inputProperties.name\" [type]=\"inputProperties.type\" [name]=\"inputProperties.name\" [id]=\"inputProperties.id\" [placeholder]=\"(inputProperties.placeholder|translate)\"\n        [autocomplete]=\"inputProperties.autocomplete\">\n    <app-input-error-label class=\"message-error\" *ngIf=\"displayMessage === true\"  [errorData]=\"((inputProperties.formControl|formControlErrors))\"></app-input-error-label>\n</div>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ClockComponent",
            "id": "component-ClockComponent-e8c2ced8d5eb6cbc0a49838f07f36d4f",
            "file": "src/app/pomodoro/component/clock/clock.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-clock",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./clock.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "seconds",
                    "line": 29,
                    "type": "number"
                },
                {
                    "name": "stateChangeEvent",
                    "defaultValue": "new Subject()",
                    "line": 30,
                    "type": "Subject<ClockState>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "endSubscriptions",
                    "defaultValue": "new Subject()",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "hoursIndicatorElement",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "minutesIndicatorElement",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "pauseEvent",
                    "defaultValue": "new Subject()",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "playEvent",
                    "defaultValue": "new Subject()",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "secondsIndicatorElement",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "secondsStateValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "stopClock",
                    "defaultValue": "new Subject()",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "time",
                    "type": "Array<number>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "manageNoneState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "description": "<p>Set hand indicators to initial position</p>\n",
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "managePauseState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "managePlayState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "manageResumeState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186
                },
                {
                    "name": "setHandsPositions",
                    "args": [
                        {
                            "name": "hours",
                            "type": "number"
                        },
                        {
                            "name": "minutes",
                            "type": "number"
                        },
                        {
                            "name": "seconds",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "description": "<p>Set hands clock position passing</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1898,
                                "end": 1903,
                                "flags": 0,
                                "escapedText": "hours"
                            },
                            "type": "number",
                            "tagName": {
                                "pos": 1883,
                                "end": 1888,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 1889,
                                "end": 1897,
                                "flags": 0,
                                "kind": 277,
                                "type": {
                                    "pos": 1890,
                                    "end": 1896,
                                    "flags": 2097152,
                                    "kind": 134
                                }
                            }
                        },
                        {
                            "name": {
                                "pos": 1925,
                                "end": 1932,
                                "flags": 0,
                                "escapedText": "minutes"
                            },
                            "type": "number",
                            "tagName": {
                                "pos": 1910,
                                "end": 1915,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 1916,
                                "end": 1924,
                                "flags": 0,
                                "kind": 277,
                                "type": {
                                    "pos": 1917,
                                    "end": 1923,
                                    "flags": 2097152,
                                    "kind": 134
                                }
                            }
                        },
                        {
                            "name": {
                                "pos": 1954,
                                "end": 1961,
                                "flags": 0,
                                "escapedText": "seconds"
                            },
                            "type": "number",
                            "tagName": {
                                "pos": 1939,
                                "end": 1944,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 1945,
                                "end": 1953,
                                "flags": 0,
                                "kind": 277,
                                "type": {
                                    "pos": 1946,
                                    "end": 1952,
                                    "flags": 2097152,
                                    "kind": 134
                                }
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToStateChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "timerStateManager",
                    "args": [
                        {
                            "name": "state",
                            "type": "ClockState"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "ClockState",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "timerSubscription",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "description": "<p>Starts timer subscription</p>\n",
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "timerSubscriptionCompleted",
                    "args": [
                        {
                            "name": "timeLastValue",
                            "type": "Array<number>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "description": "<p>Actions to execute when time subscription completes</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "timeLastValue",
                            "type": "Array<number>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { EMPTY } from 'rxjs';\nimport { interval } from 'rxjs/internal/observable/interval';\nimport { merge } from 'rxjs/internal/observable/merge';\nimport { Subject } from 'rxjs/internal/Subject';\nimport {\n  mapTo,\n  scan,\n  startWith,\n  switchMap,\n  takeUntil,\n  takeWhile,\n} from 'rxjs/operators';\nimport { secondsToFullTime } from 'src/app/helper/functions/Time';\nimport { ClockState } from './ClockState';\n@Component({\n  selector: 'app-clock',\n  templateUrl: './clock.component.html',\n})\nexport class ClockComponent implements OnInit, AfterViewInit, OnDestroy {\n  @Input() seconds: number;\n  @Input() stateChangeEvent: Subject<ClockState> = new Subject();\n  public time: Array<number>;\n  protected secondsIndicatorElement: ElementRef;\n  protected minutesIndicatorElement: ElementRef;\n  protected hoursIndicatorElement: ElementRef;\n  protected stopClock: Subject<void> = new Subject();\n  protected endSubscriptions: Subject<void> = new Subject();\n  protected secondsStateValue: number;\n  protected pauseEvent: Subject<boolean> = new Subject();\n  protected playEvent: Subject<boolean> = new Subject();\n\n  @ViewChild('secondsIndicator', { read: ElementRef, static: false })\n  set secondsIndicator(content: ElementRef) {\n    if (content) {\n      this.secondsIndicatorElement = content;\n    }\n  }\n  @ViewChild('minutesIndicator') set minutesIndicator(content: ElementRef) {\n    if (content) {\n      this.minutesIndicatorElement = content;\n    }\n  }\n  @ViewChild('hoursIndicator') set hoursIndicator(content: ElementRef) {\n    if (content) {\n      this.hoursIndicatorElement = content;\n    }\n  }\n\n  /**\n   * constructor Method class\n   */\n  constructor() {\n    this.seconds = 120;\n    this.time = [0, 0, 0];\n  }\n\n  /**\n   * Set hands clock position passing\n   * @param {number} hours\n   * @param {number} minutes\n   * @param {number} seconds\n   */\n  protected setHandsPositions(\n      hours: number,\n      minutes: number,\n      seconds: number,\n  ): void {\n    this.secondsIndicatorElement.nativeElement.style.transform = `rotateZ(calc(6deg * ${seconds}))`;\n    this.minutesIndicatorElement.nativeElement.style.transform = `rotateZ(calc(6deg * ${minutes}))`;\n    this.hoursIndicatorElement.nativeElement.style.transform = `rotateZ(calc(6deg * ${hours}))`;\n  }\n\n  /**\n   * Actions to execute when time subscription completes\n   */\n  protected timerSubscriptionCompleted(timeLastValue: Array<number>): void {\n    if (timeLastValue === [0, 0, 0]) {\n      this.stateChangeEvent.next({ state: 'NONE' });\n    }\n  }\n\n  /**\n   * Set hand indicators to initial position\n   */\n  protected manageNoneState(): void {\n    this.stopClock.next();\n    this.setHandsPositions(0, 0, 0);\n    this.time = [0, 0, 0];\n    this.secondsStateValue = 0;\n  }\n\n  protected managePlayState(): void {\n    this.playEvent.next(true);\n    this.timerSubscription();\n  }\n\n  protected manageResumeState(): void {\n    this.playEvent.next(true);\n  }\n\n  protected managePauseState(): void {\n    // this.stopClock.next();\n    this.pauseEvent.next(false);\n    console.log(\n        'Clock component -- secondsStateValue on pause',\n        this.secondsStateValue,\n    );\n  }\n\n  protected timerStateManager(state: ClockState): void {\n    switch (state.state) {\n      case 'NONE':\n        this.manageNoneState();\n        break;\n      case 'PAUSE':\n        this.managePauseState();\n        break;\n      case 'PLAY':\n        this.managePlayState();\n        break;\n      case 'RESUME':\n        this.manageResumeState();\n        break;\n    }\n  }\n\n  protected subscribeToStateChanges(): void {\n    this.stateChangeEvent.pipe(takeUntil(this.endSubscriptions)).subscribe({\n      next: (state: ClockState) => {\n        this.timerStateManager(state);\n        console.log(\n            'Clock component -- clock state change subscription',\n            state,\n        );\n      },\n      error: (err) => {\n        console.error(\n            'Clock component -- error on clock state change subscription',\n            err,\n        );\n      },\n    });\n  }\n\n  /**\n   * Starts timer subscription\n   */\n  protected timerSubscription(): void {\n    const numbers = interval(1000).pipe(mapTo(1));\n    merge(this.pauseEvent, this.playEvent)\n        .pipe(\n            startWith(true),\n            switchMap((tickValue) => (tickValue ? numbers : EMPTY)),\n            scan((acc, curr) => {\n              this.secondsStateValue = curr ? curr + acc : acc;\n              return curr ? curr + acc : acc;\n            }, this.secondsStateValue - 1),\n            takeWhile((v) => v <= this.seconds),\n            takeUntil(this.stopClock),\n        )\n        .subscribe({\n          next: (tickValue: number) => {\n            if (tickValue !== null && tickValue !== undefined) {\n              this.time = secondsToFullTime(this.seconds - tickValue);\n              this.setHandsPositions(this.time[0], this.time[1], tickValue);\n              console.log('count down: ', tickValue);\n            }\n          },\n          error: (err) => console.log(err),\n          complete: () => {\n            console.log('Completed', this.time);\n            this.timerSubscriptionCompleted(this.time);\n          },\n        });\n  }\n\n  ngOnInit(): void {\n    this.secondsStateValue = 0;\n    this.subscribeToStateChanges();\n  }\n\n  ngAfterViewInit(): void {\n    this.setHandsPositions(0, 0, 0);\n  }\n\n  ngOnDestroy(): void {\n    this.endSubscriptions.next();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor Method class</p>\n",
                "args": [],
                "line": 56
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "secondsIndicator": {
                    "name": "secondsIndicator",
                    "setSignature": {
                        "name": "secondsIndicator",
                        "type": "void",
                        "args": [
                            {
                                "name": "content",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 42,
                        "jsdoctags": [
                            {
                                "name": "content",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "minutesIndicator": {
                    "name": "minutesIndicator",
                    "setSignature": {
                        "name": "minutesIndicator",
                        "type": "void",
                        "args": [
                            {
                                "name": "content",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 47,
                        "jsdoctags": [
                            {
                                "name": "content",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "hoursIndicator": {
                    "name": "hoursIndicator",
                    "setSignature": {
                        "name": "hoursIndicator",
                        "type": "void",
                        "args": [
                            {
                                "name": "content",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 52,
                        "jsdoctags": [
                            {
                                "name": "content",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"clock\">\n    <!-- seconds clock hand -->\n    <div #secondsIndicator class=\"clock__second\"></div>\n    <!-- minutes clock hand -->\n    <div #minutesIndicator class=\"clock__minute\"></div>\n    <!-- hour clock hand -->\n    <div #hoursIndicator class=\"clock__hour\"></div>\n    <!-- Label with time count {hh:mm:ss} -->\n    <div class=\"hour\">\n        <p>{{time | timeFormatter: time}}</p>\n    </div>\n    <div class=\"clock__axis\"></div>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n    <section class=\"clock__indicator\"></section>\n</div>"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-5ce05d687491cd8f45a78bff6321da56",
            "file": "src/app/board/component/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n})\nexport class DashboardComponent {\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 7
            },
            "templateData": "<div layout=\"row\">\n    <div flex style=\"border: 1px solid\">First item in row</div>\n    <div flex style=\"border: 1px solid\">Second item in row</div>\n  </div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-e92e65afb347e28e1f1776c67a078f5e-1",
            "file": "src/app/component/shared/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n})\nexport class HeaderComponent {\n  constructor() { }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 7
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<div class=\"bar bar-1\">\n    <div class=\"icon icon-1\"></div>\n    <div class=\"icon icon-2\"></div>\n    <div class=\"icon icon-3\"></div>\n    <div class=\"username\">\n        Emily Blunt\n    </div>\n    <div class=\"search\">\n        <input type=\"search\" placeholder=\"search...\" />\n    </div>\n</div>"
        },
        {
            "name": "InputErrorLabelComponent",
            "id": "component-InputErrorLabelComponent-1f4caa3b956bd50f7881269e54fa494f",
            "file": "src/app/component/atoms/texts/input-error-label/input-error-label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-input-error-label",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-error-label.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "errorData",
                    "line": 9,
                    "type": "FormErrorI"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FormErrorI } from 'src/app/interfaces/FormError';\n\n@Component({\n  selector: 'app-input-error-label',\n  templateUrl: './input-error-label.component.html',\n})\nexport class InputErrorLabelComponent {\n  @Input() errorData: FormErrorI;\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "templateData": "<p class=\"message-label\" *ngIf=\"errorData !== null && errorData !== undefined\">{{(errorData.errorCode|translate:errorData.value)}}</p>\n"
        },
        {
            "name": "LabelMessageComponent",
            "id": "component-LabelMessageComponent-1d10c45bc7779d0f29d4ee1fcdab1937",
            "file": "src/app/component/atoms/texts/label-message/label-message.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-label-message",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./label-message.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "message",
                    "line": 8,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-label-message',\n  templateUrl: './label-message.component.html',\n})\nexport class LabelMessageComponent {\n  @Input() message: string;\n\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "templateData": "<p class=\"message-label\">{{(message|translate)}}</p>\n"
        },
        {
            "name": "LandingComponent",
            "id": "component-LandingComponent-99cf9786d3dd18455d965771c520cb84",
            "file": "src/app/pomodoro/component/landing/landing.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-landing",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./landing.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clockStateEvent",
                    "defaultValue": "new Subject()",
                    "type": "Subject<ClockState>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "pauseClock",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "playClock",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "resumeClock",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "stopClock",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs/internal/Subject';\nimport { ClockState } from '../clock/ClockState';\n\n@Component({\n  selector: 'app-landing',\n  templateUrl: './landing.component.html',\n})\nexport class LandingComponent implements OnInit {\n  public clockStateEvent: Subject<ClockState> = new Subject();\n  constructor() { }\n\n  public playClock(): void {\n    this.clockStateEvent.next({ state: 'PLAY' });\n  }\n\n  public pauseClock(): void {\n    this.clockStateEvent.next({ state: 'PAUSE' });\n  }\n\n  public stopClock(): void {\n    this.clockStateEvent.next({ state: 'NONE' });\n  }\n\n  public resumeClock(): void {\n    this.clockStateEvent.next({ state: 'RESUME' });\n  }\n\n  ngOnInit(): void {\n    console.log('Landing component -- init life state');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- Clock component -->\n<app-clock [stateChangeEvent]=\"clockStateEvent\"></app-clock>\n<!-- Time control buttons -->\n<button (click)=\"pauseClock()\">Pause</button>\n<button (click)=\"playClock()\">Play</button>\n<button (click)=\"stopClock()\">Stop</button>\n<button (click)=\"resumeClock()\">Resume</button>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 64,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "SelectLangComponent",
            "id": "component-SelectLangComponent-518f8f5f19653f972a74045d95536248",
            "file": "src/app/component/atoms/inputs/select-lang/select-lang.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-select-lang",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./select-lang.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "languages",
                    "defaultValue": "environment.languages",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedLanguage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeLanguage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { LanguageService } from 'src/app/services/language/language.service';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-select-lang',\n  templateUrl: './select-lang.component.html',\n})\nexport class SelectLangComponent {\n  public selectedLanguage:string;\n  public languages = environment.languages;\n  constructor(private language: LanguageService) {\n    this.selectedLanguage = this.language.currentLanguage();\n  }\n\n  public changeLanguage(): void {\n    this.language.changeLanguage(this.selectedLanguage);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "language",
                        "type": "LanguageService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "language",
                        "type": "LanguageService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<select name=\"languages\" id=\"languages\" [(ngModel)]=\"selectedLanguage\" (change)=\"changeLanguage()\">\n    <option *ngFor=\"let lang of languages\">{{lang}}</option>\n</select>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthenticationModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthenticationHomeComponent"
                        },
                        {
                            "name": "AuthenticationLoginComponent"
                        },
                        {
                            "name": "AuthenticationSignupComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthenticationRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthenticationRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BoardModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DashboardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BoardRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BoardRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PomodoroModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ClockComponent"
                        },
                        {
                            "name": "LandingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PomodoroRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PomodoroRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BasicInputFieldComponent"
                        },
                        {
                            "name": "FormControlErrorsPipe"
                        },
                        {
                            "name": "FormGroupErrorsPipe"
                        },
                        {
                            "name": "InputErrorLabelComponent"
                        },
                        {
                            "name": "LabelMessageComponent"
                        },
                        {
                            "name": "SelectLangComponent"
                        },
                        {
                            "name": "TimeFormatterPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BasicInputFieldComponent"
                        },
                        {
                            "name": "FormControlErrorsPipe"
                        },
                        {
                            "name": "FormGroupErrorsPipe"
                        },
                        {
                            "name": "InputErrorLabelComponent"
                        },
                        {
                            "name": "LabelMessageComponent"
                        },
                        {
                            "name": "SelectLangComponent"
                        },
                        {
                            "name": "TimeFormatterPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  languages: languages,\n  firebase: firebaseConfig,\n  production: true,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  languages: languages,\n  firebase: firebaseConfig,\n  production: false,\n}"
            },
            {
                "name": "firebaseConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/firebase.ts",
                "type": "object",
                "defaultValue": "{\n  apiKey: 'AIzaSyDrogY3wUS715zKTok2v3CVfgoxXaFzUKM',\n  authDomain: 'pomodoro-app-44c9b.firebaseapp.com',\n  projectId: 'pomodoro-app-44c9b',\n  storageBucket: 'pomodoro-app-44c9b.appspot.com',\n  messagingSenderId: '289857841694',\n  appId: '1:289857841694:web:c474d570809171d37bdc0f',\n  measurementId: 'G-23394CXF2R',\n}"
            },
            {
                "name": "languages",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/supportedLanguages.ts",
                "type": "[]",
                "defaultValue": "['es', 'en']"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            }
        ],
        "functions": [
            {
                "name": "extractErrorKeys",
                "file": "src/app/helper/functions/extract-form-validator-data/strategies.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "formControl"
                    }
                ],
                "returnType": "Array | null | undefined",
                "jsdoctags": [
                    {
                        "name": "formControl",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "extractGenericValidatorsData",
                "file": "src/app/helper/functions/extract-form-validator-data/strategies.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "formControl"
                    }
                ],
                "returnType": "FormErrorI",
                "jsdoctags": [
                    {
                        "name": "formControl",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "extractLengthValidatorsData",
                "file": "src/app/helper/functions/extract-form-validator-data/strategies.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "formControl"
                    }
                ],
                "returnType": "FormErrorI",
                "jsdoctags": [
                    {
                        "name": "formControl",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "extractLimitedValueValidatorsData",
                "file": "src/app/helper/functions/extract-form-validator-data/strategies.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "formControl"
                    }
                ],
                "returnType": "FormErrorI",
                "jsdoctags": [
                    {
                        "name": "formControl",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>For AOT</p>\n",
                "args": [
                    {
                        "name": "http"
                    }
                ],
                "returnType": "TranslateHttpLoader",
                "jsdoctags": [
                    {
                        "name": "http",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "secondsToFullTime",
                "file": "src/app/helper/functions/Time.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "timeToTransform"
                    }
                ],
                "returnType": "Array<number>",
                "jsdoctags": [
                    {
                        "name": "timeToTransform",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "selectExtractValidationErrorStrategy",
                "file": "src/app/helper/functions/extract-form-validator-data/strategies.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "errorKey"
                    },
                    {
                        "name": "formControl"
                    }
                ],
                "returnType": "FormErrorI",
                "jsdoctags": [
                    {
                        "name": "errorKey",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formControl",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "ClockState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/pomodoro/component/clock/ClockState.ts",
                "description": "",
                "kind": 165
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  languages: languages,\n  firebase: firebaseConfig,\n  production: true,\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  languages: languages,\n  firebase: firebaseConfig,\n  production: false,\n}"
                }
            ],
            "src/environments/firebase.ts": [
                {
                    "name": "firebaseConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/firebase.ts",
                    "type": "object",
                    "defaultValue": "{\n  apiKey: 'AIzaSyDrogY3wUS715zKTok2v3CVfgoxXaFzUKM',\n  authDomain: 'pomodoro-app-44c9b.firebaseapp.com',\n  projectId: 'pomodoro-app-44c9b',\n  storageBucket: 'pomodoro-app-44c9b.appspot.com',\n  messagingSenderId: '289857841694',\n  appId: '1:289857841694:web:c474d570809171d37bdc0f',\n  measurementId: 'G-23394CXF2R',\n}"
                }
            ],
            "src/environments/supportedLanguages.ts": [
                {
                    "name": "languages",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/supportedLanguages.ts",
                    "type": "[]",
                    "defaultValue": "['es', 'en']"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/helper/functions/extract-form-validator-data/strategies.ts": [
                {
                    "name": "extractErrorKeys",
                    "file": "src/app/helper/functions/extract-form-validator-data/strategies.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "formControl"
                        }
                    ],
                    "returnType": "Array | null | undefined",
                    "jsdoctags": [
                        {
                            "name": "formControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "extractGenericValidatorsData",
                    "file": "src/app/helper/functions/extract-form-validator-data/strategies.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "formControl"
                        }
                    ],
                    "returnType": "FormErrorI",
                    "jsdoctags": [
                        {
                            "name": "formControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "extractLengthValidatorsData",
                    "file": "src/app/helper/functions/extract-form-validator-data/strategies.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "formControl"
                        }
                    ],
                    "returnType": "FormErrorI",
                    "jsdoctags": [
                        {
                            "name": "formControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "extractLimitedValueValidatorsData",
                    "file": "src/app/helper/functions/extract-form-validator-data/strategies.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "formControl"
                        }
                    ],
                    "returnType": "FormErrorI",
                    "jsdoctags": [
                        {
                            "name": "formControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectExtractValidationErrorStrategy",
                    "file": "src/app/helper/functions/extract-form-validator-data/strategies.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "errorKey"
                        },
                        {
                            "name": "formControl"
                        }
                    ],
                    "returnType": "FormErrorI",
                    "jsdoctags": [
                        {
                            "name": "errorKey",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "formControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>For AOT</p>\n",
                    "args": [
                        {
                            "name": "http"
                        }
                    ],
                    "returnType": "TranslateHttpLoader",
                    "jsdoctags": [
                        {
                            "name": "http",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/helper/functions/Time.ts": [
                {
                    "name": "secondsToFullTime",
                    "file": "src/app/helper/functions/Time.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "timeToTransform"
                        }
                    ],
                    "returnType": "Array<number>",
                    "jsdoctags": [
                        {
                            "name": "timeToTransform",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/pomodoro/component/clock/ClockState.ts": [
                {
                    "name": "ClockState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/pomodoro/component/clock/ClockState.ts",
                    "description": "",
                    "kind": 165
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/authentication/component/authentication-home/authentication-home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthenticationHomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/authentication/component/authentication-login/authentication-login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthenticationLoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/authentication/component/authentication-signup/authentication-signup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthenticationSignupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/board/component/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/atoms/inputs/basic-input-field/basic-input-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BasicInputFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/component/atoms/inputs/select-lang/select-lang.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectLangComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/component/atoms/texts/input-error-label/input-error-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputErrorLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/component/atoms/texts/label-message/label-message.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LabelMessageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/component/shared/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/helper/functions/Time.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "secondsToFullTime",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helper/functions/extract-form-validator-data/strategies.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "extractErrorKeys",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helper/functions/extract-form-validator-data/strategies.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "extractGenericValidatorsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helper/functions/extract-form-validator-data/strategies.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "extractLengthValidatorsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helper/functions/extract-form-validator-data/strategies.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "extractLimitedValueValidatorsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helper/functions/extract-form-validator-data/strategies.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "selectExtractValidationErrorStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helper/guard/guest/gest/guest.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "GuestGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/helper/guard/user/user-auth-guard/user.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "UserGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/helper/pipes/form-control-errors.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FormControlErrorsPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helper/pipes/form-group-errors.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FormGroupErrorsPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helper/pipes/timeFormatter/time-formater.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TimeFormatterPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helper/validations/password-match.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ValidatePassword",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/AuthError.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthError",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/FormError.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormErrorI",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/inputs/BasicInputFieldI.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BasicInputFieldI",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pomodoro/component/clock/clock.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ClockComponent",
                "coveragePercent": 20,
                "coverageCount": "5/25",
                "status": "low"
            },
            {
                "filePath": "src/app/pomodoro/component/landing/landing.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LandingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/authentication/authentication.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthenticationService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/language/language.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LanguageService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/firebase.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "firebaseConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/supportedLanguages.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "languages",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}